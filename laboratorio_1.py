# -*- coding: utf-8 -*-
"""Laboratorio 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EgJvWo10lDvj2XgKdv8fqELJBk3Fg7vi

# **Análisis de datos sobre las ventas mensuales y anual**

repositorio : https://github.com/FacundoLavigne/UPSO-MachineLearning-BigData.git

para traer el repo usar:

`git remote add origin https://github.com/FacundoLavigne/UPSO-MachineLearning-BigData.git`

# ***Introducción***

Analizar en profundidad e interpretar de forma veraz los datos vinculados a las ventas de nuestra empresa, es un paso imprescindible para la formulación y toma de desiciones pertinentes de cara al futuro. Dichas desiciones y sus respectivos resultados futuros, serán mas o menos eficaces y eficientes, en función de qué tan bien conozcamos el terreno en el que nos manejamos, tanto en términos temporales (horas, días, meses) como espaciales (geográficos).

Por ello, a partir de este informe nos proponemos allanar el camino para que los pasos que demos en adelante, tengan un cuerpo de información capaz de sustentar desiciones que garanticen el crecimiento de nuestras rentas y la mitigacion de perdidas involuntarias.

En dicho informe, emplearemos una batería de herramientas que faciliten la comprensión general de nuestra situación actual y acumulada a lo largo de estos ultimos X meses, entre las cuales encontramos graficos de barras, todo el ETC QUE USEMOS.

# ***Los datos a analizar*** (presentación detallada de las características clave de los datos a analizar

Como es lógico, las fuentes de donde provienen los datos que analizaremos son las ventas propiamente realizadas por parte de nuestros vendedores en todas las tiendas del país. Estas ventas y su información específica, la encontramos alojada en una colección de datos llamada Dataframe.

En este elemento mencionado, podemos diferenciar varias tablas correspondiente cada una a un mes del año, que contienen información de las transacciones ejecutadas mensualmente, y en ellas podemos diferenciar:
* los productos vendidos y su precio unitario,
* la localización espacial de los envíos,
* la cantidad de pedidos realizados,
* los montos de cada venta,
* los clientes que compraron,
* las fechas y horas.

No obstante, a partir de estos datos que nos arrojan las tablas, también generaremos nuevos datos, cuestión que nos permitirá inferir de diferente manera respecto a los comportamientos de los diferentes compradores. Esto lo haremos a partir de algunas preguntas en la siguiente sección, denominada "Desarrollo".
"""

import os
import pandas as pd

path_facu = '/content/drive/MyDrive/UPSO/Tecnicatura Prog/Año 2/2 cuatri/machine_learning_bigdata/datos_ventas'


ruta_de_acceso = path_facu

archivos = os.listdir(ruta_de_acceso)
archivos

dataframes = {}

for archivo in archivos:                                  # elegimos cual archivo queremos especificamente
  if archivo.endswith('.csv'):
    mes = archivo.split('_')[3]                           # el 3er elemento del nombre, es el mes.csv
    ruta_completa = os.path.join(ruta_de_acceso, archivo) # une la ruta general con la del archivo especifico
    df = pd.read_csv(ruta_completa)                       # carga los csv en un df
    df_ventas = df.copy()

    #CODIGO RECILADO DE LA CLASE 2
    #drop nan en el mismo for para que lo haga con cada mes
    df_ventas['Cantidad Pedida'] = pd.to_numeric(df_ventas['Cantidad Pedida'], errors='coerce')
    df_ventas['Precio Unitario'] = pd.to_numeric(df_ventas['Precio Unitario'], errors='coerce')

    df_ventas = df_ventas.loc[~df_ventas['Cantidad Pedida'].isna()]#eliminamos todos los nan y me quedo solo con valores numericos
    df_ventas = df_ventas.loc[~df_ventas['Precio Unitario'].isna()]

    df_ventas = df_ventas.dropna()#quito los nan

    df_ventas['Cantidad Pedida'] = df_ventas['Cantidad Pedida'].astype(int)
    df_ventas['Precio Unitario'] = df_ventas['Precio Unitario'].astype(float)

    dataframes[mes] = df_ventas

dataframes['Enero.csv'] #me pasa especificamente el contenido de ese dataframe de ese mes

from google.colab import drive
drive.mount('/content/drive')

"""# ***Desarrollo del análisis***

## 1. **Comportamiento de las ventas en los distintos meses:**

*   ¿Cómo variaron las ventas a lo largo de los diferentes meses?
*   ¿Hubo algún mes que se destacó en términos de ventas?
*   ¿Cuál es el ingreso total generado por mes?

Como podemos observar en el siguiente gráfico de barras, las ventas totales a lo largo del año, fueron variando de forma radicalmente de mes a mes. El gráfico empleado, nos facilita la interpretación de los datos totales, gracias al empleo de una escala de colores que van del verde al rojo, en donde el verde corresponde a las mayores ventas y el rojo a las menores.

Podemos verificar picos de ventas en el mes de diciembre y mínimos en el mes de septiembre.

A su vez, podemos observar el total de ventas de cada mes en cada barra del gráfico. Dicha información fue obtenida al cruzar los datos del total de unidades vendidas por el precio unitario de cada producto, obteniendo así los ingresos mensuales totales.
"""

meses = ['Enero.csv', 'Febrero.csv', 'Marzo.csv', 'Abril.csv', 'Mayo.csv', 'Junio.csv', 'Julio.csv', 'Agosto.csv', 'Septiembre.csv', 'Octubre.csv', 'Noviembre.csv','Diciembre.csv']

for mes in meses:
  dataframe_mes = dataframes[mes]

def extraer_datos(datos):
  datos['Fecha de Pedido'] = pd.to_datetime(df_ventas['Fecha de Pedido'])
  datos['Hora'] = datos['Fecha de Pedido'].dt.hour
  datos['Dia'] = datos['Fecha de Pedido'].dt.day
  return datos

import plotly.graph_objects as go
import matplotlib.pyplot as plt

#representamos los meses y las ventas por mes


meses = ['Enero.csv', 'Febrero.csv', 'Marzo.csv', 'Abril.csv', 'Mayo.csv', 'Junio.csv', 'Julio.csv', 'Agosto.csv', 'Septiembre.csv', 'Octubre.csv', 'Noviembre.csv','Diciembre.csv']

totales_ventas = []
nombres_meses = []

for mes in meses:
  dataframe_mes = dataframes[mes]                 #exraemos el mes
  dataframes_mes = extraer_datos(dataframes[mes])

  total_ventas_mes = dataframe_mes['Cantidad Pedida'].sum()
  totales_ventas.append(total_ventas_mes)
  nombres_meses.append(mes)


#Creo el objeto figura con go.Figure()
fig = go.Figure()

#Afgrego grafico en mi obj figura (fig) con add_trace
fig.add_trace(go.Bar(
    x = nombres_meses,
    y = totales_ventas,
    name = 'Unidades Vendidas',
    marker = dict(color= totales_ventas, colorscale ='RdYlGn', colorbar = dict(title='Total de ventas')),
    text = totales_ventas,
    textposition = 'auto'

))

#Actualizacion del grafico con update_layout
fig.update_layout(
    title='Unidades Vendidas por mes',
    xaxis = dict(title='Meses'),
    yaxis = dict(title='Unidades vendidas')
)

"""## 2. **Optimización de la publicidad y patrón de ventas por hora:**
* ¿Cuál es el momento ideal del día para presentar la publicidad y aumentar la
probabilidad de compra?
* ¿Cómo cambian los patrones de ventas por hora a lo largo del año?
* ¿Hay modificaciones en los patrones de ventas durante las horas de mayor actividad en los distintos meses?

En relación a los momentos ideales para ofrecer nuestros productos al mercado mediante la publicidad en redes sociales, hemos podido comprobar que alrededor de las 19hs, es la hora en el que las personas más ejecutan compras de nuestras mercancías.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Supongamos que tienes un DataFrame llamado 'df_ventas' con las columnas mencionadas.

# Asegúrate de que 'Fecha de Pedido' sea una columna de tipo datetime.
df_ventas['Fecha de Pedido'] = pd.to_datetime(df_ventas['Fecha de Pedido'])

# Crea una nueva columna 'Hora de Pedido' que extraiga la hora de 'Fecha de Pedido'.
df_ventas['Hora de Pedido'] = df_ventas['Fecha de Pedido'].dt.hour

# Agrupa los datos por hora y calcula la cantidad total de productos vendidos en cada hora.
ventas_por_hora = df_ventas.groupby('Hora de Pedido')['Cantidad Pedida'].sum()

# Grafica los resultados para visualizar los patrones de ventas por hora a lo largo del año.
ventas_por_hora.plot(kind='line', figsize=(12, 6))
plt.title('Patrones de Ventas por Hora a lo Largo del Año')
plt.xlabel('Hora del Día')
plt.ylabel('Cantidad de Productos Vendidos')
plt.grid(True)
plt.show()

Horas = list(range(24))
fig = go.Figure()

meses = ['Enero.csv', 'Febrero.csv', 'Marzo.csv', 'Abril.csv', 'Mayo.csv', 'Junio.csv', 'Julio.csv', 'Agosto.csv', 'Septiembre.csv', 'Octubre.csv', 'Noviembre.csv','Diciembre.csv']

for mes in meses:
  dataframe_mes = dataframes[mes] #exraemos el mes
  dataframe_mes = extraer_datos(dataframe_mes)

  Ventas_por_hora = dataframe_mes.groupby('Hora')['Cantidad Pedida'].count()


#agregamos una nueva figura con un grafico con la variacion de los precios segun el producto

fig.add_trace(go.Scatter(
        x = Horas,
        y = Ventas_por_hora,
        mode='lines',
        name = mes,
        line = dict(shape='spline', smoothing=1.3,width=2))
)

#Actualizacion del grafico con update_layout
fig.update_layout(
    title='Unidades Vendidas por Hora',
    xaxis = dict(title='Horario', tickvals=Horas),
    yaxis = dict(title='Unidades vendidas',side='left'),
)

fig.show()

"""## 3. **Distribución de ventas por ubicación:**
* ¿En qué ciudades se han registrado las mayores ventas?
* ¿Cómo se comparan las ventas en diferentes estados o regiones?
* ¿Existe variación en las ventas por estado a lo largo de los meses?

Como podemos verificar en el cuadro debajo, las ciudades en las que más ventas se efectuaron son San Francisco, Los Angeles, Nueva York y Boston.

Naturalmente, las ventas a lo largo de los meses por estado, también han variado sustancialmente. En ese sentido podemos verificar en el mapa de los EEUU, la cantidad de ventas totales por estado. Con California en primer lugar, seguido por Texas y Nueva York.
"""

#Separa las ubicaciones de los elementos

direccion_df = df_ventas['Dirección de Envio'].str.split(', ',expand=True)

direccion_df.columns = ['Calle', 'Ciudad', 'PO Box']

direccion_df[['Estado', 'Codigo Postal']] = direccion_df['PO Box'].str.split(' ', expand=True)

df_desglosado = pd.concat([df_ventas,direccion_df], axis=True)
df_desglosado

import plotly.express as px

# Crear un gráfico de barras horizontales con colores por estado
fig = px.bar(
    df_desglosado,
    x="Cantidad Pedida",  # Datos en el eje X (cantidad de pedidos)
    y="Ciudad",              # Datos en el eje Y (ciudades)
    color="Estado",          # Colorear por la columna "Estado"
    orientation='h',         # Bar chart horizontal
    title="Ciudades con Más Pedidos en EE. UU.",
    labels={'Cantidad de Ventas': 'Cantidad de Pedidos', 'Ciudad': 'Ciudad'},
)

# Personalizar el diseño del gráfico
fig.update_layout(
    xaxis_title="Cantidad de Pedidos",  # Título del eje X
    yaxis_title="Ciudad",              # Título del eje Y
)

# Mostrar el gráfico interactivo
fig.show()

#sacamos la cantidad sumada de pedidos por estado
ventas_por_estado = df_desglosado.groupby('Estado')['Cantidad Pedida'].sum()
ventas_por_estado = ventas_por_estado.reset_index(inplace=False)


import plotly.express as px

fig = px.choropleth(ventas_por_estado, locations='Estado', locationmode='USA-states', color='Cantidad Pedida',
                           color_continuous_scale="RdYlGn", #hay otros "iso_alpha"
                           scope="usa", #intercambiable, esta world, europe, etc
                    title='Ventas por estado'
                          )
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

"""## 4. Análisis del producto más vendido:
* ¿Cuál es el producto más vendido en general y en cada mes?
* ¿Qué factores crees que han contribuido al éxito de ese producto en particular?

Los datos nos arrojan que el producto mas vendido en general son las AAA Batteries (4-pack). A esto podemos verlo en el primer gráfico inferior. El segundo son las AA Batteries (4-pack) y el tercero es el USB-C Charging Cable.

En cada mes, se mantiene la tendencia general, como podemos ver en los graficos mas abajo. Allí podemos ver que los productos que mas se venden de manera individual en cada mes, siguen siendo los ya mencionados, incluso en el mismo orden, aunque podemos agregar a la lista un cuarto producto, las Lightning Charging Cable.
"""

# Nos aseguramos de que 'Fecha de Pedido' sea un objeto datetime
df_desglosado['Fecha de Pedido'] = pd.to_datetime(df_desglosado['Fecha de Pedido'])

# Calculamos los productos más vendidos en general
productos_mas_vendidos_general = df_desglosado.groupby('Producto')['Cantidad Pedida'].sum().reset_index()
productos_mas_vendidos_general = productos_mas_vendidos_general.sort_values(by='Cantidad Pedida', ascending=False)
productos_mas_vendidos_general.reset_index(drop=True, inplace=True)

productos_mas_vendidos_general

import plotly.express as px

# Creamos el gráfico de los productos más vendidos en general
fig = px.bar(
    productos_mas_vendidos_general,
    x='Cantidad Pedida',
    y='Producto',
    orientation='h',  # Barras horizontales
    title='Productos Más Vendidos en General',
    labels={'Cantidad Pedida': 'Cantidad Vendida', 'Producto': 'Producto'},
)

# Mostramos el gráfico interactivo
fig.show()

import pandas as pd

# Lista de los nombres de los meses
meses = ['Enero.csv', 'Febrero.csv', 'Marzo.csv', 'Abril.csv', 'Mayo.csv', 'Junio.csv', 'Julio.csv', 'Agosto.csv', 'Septiembre.csv', 'Octubre.csv', 'Noviembre.csv', 'Diciembre.csv']

# Creamos un DataFrame vacío para almacenar los resultados
productos_mas_vendidos_por_mes = pd.DataFrame(columns=['Mes', 'Producto Más Vendido', 'Cantidad Vendida'])

for mes in meses:
    # Obtenemos el DataFrame del mes actual
    df_mes = dataframes[mes]

    # Agregamos una columna de mes
    df_mes['Mes'] = mes.split('.')[0]  # Extraer el nombre del mes sin la extensión .csv

    # Calculamos el producto más vendido en el mes actual
    producto_mas_vendido = df_mes.groupby('Producto')['Cantidad Pedida'].sum().idxmax()

    # Calculamos la cantidad de productos vendidos del producto más vendido
    cantidad_vendida = df_mes[df_mes['Producto'] == producto_mas_vendido]['Cantidad Pedida'].sum()

    # Agregamos los resultados al DataFrame principal usando pandas.concat
    productos_mas_vendidos_por_mes = pd.concat([productos_mas_vendidos_por_mes, pd.DataFrame({'Mes': [mes.split('.')[0]], 'Producto Más Vendido': [producto_mas_vendido], 'Cantidad Vendida': [cantidad_vendida]})], ignore_index=True)

productos_mas_vendidos_por_mes

import plotly.express as px

# Creamos el gráfico de barras
fig = px.bar(
    productos_mas_vendidos_por_mes,
    x='Mes',
    y='Cantidad Vendida',
    color='Producto Más Vendido',
    title='Productos Más Vendidos y Cantidad Vendida por Mes',
    labels={'Producto Más Vendido': 'Producto'},
)

# Mostramos el gráfico interactivo
fig.show()

import pandas as pd

# Lista de los nombres de los meses
meses = ['Enero.csv', 'Febrero.csv', 'Marzo.csv', 'Abril.csv', 'Mayo.csv', 'Junio.csv', 'Julio.csv', 'Agosto.csv', 'Septiembre.csv', 'Octubre.csv', 'Noviembre.csv', 'Diciembre.csv']

# Creamos un DataFrame vacío para almacenar los resultados
productos_mas_vendidos_por_mes = pd.DataFrame(columns=['Mes', 'Producto Más Vendido', 'Cantidad Vendida', 'Segundo Producto Más Vendido', 'Cantidad Segundo Vendida', 'Tercer Producto Más Vendido', 'Cantidad Tercer Vendida'])

for mes in meses:
    # Obtenemos el DataFrame del mes actual
    df_mes = dataframes[mes]

    # Agregamos una columna de mes
    df_mes['Mes'] = mes.split('.')[0]  # Extraer el nombre del mes sin la extensión .csv

    # Calculamos los tres productos más vendidos en el mes actual
    productos_mas_vendidos = df_mes.groupby('Producto')['Cantidad Pedida'].sum().nlargest(3).reset_index()

    # Agregamos los resultados al DataFrame principal
    if len(productos_mas_vendidos) >= 1:
        productos_mas_vendidos_por_mes = productos_mas_vendidos_por_mes.append({'Mes': mes.split('.')[0],
                                                                                'Producto Más Vendido': productos_mas_vendidos.iloc[0]['Producto'],
                                                                                'Cantidad Vendida': productos_mas_vendidos.iloc[0]['Cantidad Pedida']},
                                                                               ignore_index=True)
    if len(productos_mas_vendidos) >= 2:
        productos_mas_vendidos_por_mes.loc[productos_mas_vendidos_por_mes['Mes'] == mes.split('.')[0], 'Segundo Producto Más Vendido'] = productos_mas_vendidos.iloc[1]['Producto']
        productos_mas_vendidos_por_mes.loc[productos_mas_vendidos_por_mes['Mes'] == mes.split('.')[0], 'Cantidad Segundo Vendida'] = productos_mas_vendidos.iloc[1]['Cantidad Pedida']
    if len(productos_mas_vendidos) >= 3:
        productos_mas_vendidos_por_mes.loc[productos_mas_vendidos_por_mes['Mes'] == mes.split('.')[0], 'Tercer Producto Más Vendido'] = productos_mas_vendidos.iloc[2]['Producto']
        productos_mas_vendidos_por_mes.loc[productos_mas_vendidos_por_mes['Mes'] == mes.split('.')[0], 'Cantidad Tercer Vendida'] = productos_mas_vendidos.iloc[2]['Cantidad Pedida']

# Mostramos el DataFrame final con los productos más vendidos y la cantidad vendida por mes
productos_mas_vendidos_por_mes

import plotly.express as px
import pandas as pd

# Creamos el gráfico de barras para el Producto Más Vendido
fig1 = px.bar(productos_mas_vendidos_por_mes,
              x='Mes',
              y='Cantidad Vendida',
              color='Producto Más Vendido',
              title='Producto Más Vendido por Mes',
              category_orders={"Mes": meses}  # Ordenamos los meses en el gráfico
              )

# Creamos el gráfico de barras para el Segundo Producto Más Vendido
fig2 = px.bar(productos_mas_vendidos_por_mes,
              x='Mes',
              y='Cantidad Segundo Vendida',
              color='Segundo Producto Más Vendido',
              title='Segundo Producto Más Vendido por Mes',
              category_orders={"Mes": meses}  # Ordenamos los meses en el gráfico
              )

# Creamos el gráfico de barras para el Tercer Producto Más Vendido
fig3 = px.bar(productos_mas_vendidos_por_mes,
              x='Mes',
              y='Cantidad Tercer Vendida',
              color='Tercer Producto Más Vendido',
              title='Tercer Producto Más Vendido por Mes',
              category_orders={"Mes": meses}  # Ordenamos los meses en el gráfico
              )

# Mostramos los gráficos
fig1.show()
fig2.show()
fig3.show()

"""
## 5. Tendencia ventas:
* ¿Existe alguna tendencia o patrón en las ventas que se repita a lo largo de los días
en los diferentes meses?
* ¿Cómo varían las ventas a lo largo de los diferentes días de la semana?
* ¿Se observa alguna diferencia significativa en las ventas entre los días laborables y
los fines de semana?"""

from google.colab import files

# Subir un archivo CSV desde tu computadora
uploaded = files.upload()

import pandas as pd
import matplotlib.pyplot as plt
import random

# Lista de archivos CSV correspondientes a cada mes
archivos_meses = [
    "Dataset_de_ventas_Enero.csv",
    "Dataset_de_ventas_Febrero.csv",  # Asegúrate de tener el archivo de febrero, si es necesario
    "Dataset_de_ventas_Marzo.csv",
    "Dataset_de_ventas_Abril.csv",
    "Dataset_de_ventas_Mayo.csv",
    "Dataset_de_ventas_Junio.csv",
    "Dataset_de_ventas_Julio.csv",
    "Dataset_de_ventas_Agosto.csv",
    "Dataset_de_ventas_Septiembre.csv",
    "Dataset_de_ventas_Octubre.csv",
    "Dataset_de_ventas_Noviembre.csv",
    "Dataset_de_ventas_Diciembre.csv"
]

# Crear un DataFrame vacío para almacenar los datos combinados
df_combined = pd.DataFrame()
for archivo in archivos_meses:
    df = pd.read_csv(archivo)

    # Intentar convertir la columna de fecha a tipo datetime
    try:
        df['Fecha de Pedido'] = pd.to_datetime(df['Fecha de Pedido'], errors='coerce')
    except Exception as e:
        print(f"Error al convertir fechas en el archivo {archivo}: {str(e)}")

    # Filtrar filas con fechas válidas
    df = df[df['Fecha de Pedido'].notna()]

    # Limitar a 15 pedidos al azar por mes
    if len(df) > 500:
        df = df.sample(15, random_state=42)  # Utilizamos una semilla (random_state) para que sea reproducible

    df_combined = pd.concat([df_combined, df])

# Convertir la columna "Cantidad Pedida" a tipo numérico
df_combined['Cantidad Pedida'] = pd.to_numeric(df_combined['Cantidad Pedida'], errors='coerce')

# Agrupar por día de la semana y sumar las ventas
ventas_por_dia_semana = df_combined.groupby(df_combined['Fecha de Pedido'].dt.day_name())['Cantidad Pedida'].sum()

# Ordenar los días de la semana en orden
dias_semana_ordenados = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
ventas_por_dia_semana = ventas_por_dia_semana.reindex(dias_semana_ordenados)

# Crear un gráfico de barras para mostrar las ventas por día de la semana
plt.figure(figsize=(10, 6))
ventas_por_dia_semana.plot(kind='bar', color='skyblue')
plt.title('Ventas por Día de la Semana')
plt.xlabel('Día de la Semana')
plt.ylabel('Ventas')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=45)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Lista de archivos CSV correspondientes a cada mes
archivos_meses = [
    "Dataset_de_ventas_Enero.csv",
    "Dataset_de_ventas_Febrero.csv",  # Asegúrate de tener el archivo de febrero, si es necesario
    "Dataset_de_ventas_Marzo.csv",
    "Dataset_de_ventas_Abril.csv",
    "Dataset_de_ventas_Mayo.csv",
    "Dataset_de_ventas_Junio.csv",
    "Dataset_de_ventas_Julio.csv",
    "Dataset_de_ventas_Agosto.csv",
    "Dataset_de_ventas_Septiembre.csv",
    "Dataset_de_ventas_Octubre.csv",
    "Dataset_de_ventas_Noviembre.csv",
    "Dataset_de_ventas_Diciembre.csv"
]

# Crear un DataFrame vacío para almacenar los datos combinados
df_combined = pd.DataFrame()
for archivo in archivos_meses:
    df = pd.read_csv(archivo)

    # Intentar convertir la columna de fecha a tipo datetime
    try:
        df['Fecha de Pedido'] = pd.to_datetime(df['Fecha de Pedido'], errors='coerce')
    except Exception as e:
        print(f"Error al convertir fechas en el archivo {archivo}: {str(e)}")

    # Filtrar filas con fechas válidas
    df = df[df['Fecha de Pedido'].notna()]

    df_combined = pd.concat([df_combined, df])

# Convertir la columna "Cantidad Pedida" a tipo numérico
df_combined['Cantidad Pedida'] = pd.to_numeric(df_combined['Cantidad Pedida'], errors='coerce')

# Verificar si hay valores nulos después de la conversión
if df_combined['Cantidad Pedida'].isna().any():
    print("Advertencia: Hay valores no numéricos en la columna 'Cantidad Pedida'.")

# Crear un gráfico de barras para mostrar las ventas por hora
plt.figure(figsize=(12, 6))
ventas_por_hora = df_combined.groupby(df_combined['Fecha de Pedido'].dt.hour)['Cantidad Pedida'].sum()
ventas_por_hora.plot(kind='bar', color='skyblue')
plt.title('Tendencia de Ventas por Hora del Día')
plt.xlabel('Hora del Día')
plt.ylabel('Ventas')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=0)
plt.show()

"""
### 6. Impacto de eventos especiales en las ventas:
* ¿Se ha observado algún aumento o disminución significativa en las ventas en días
cercanos a eventos especiales, como días festivos?
* ¿Qué eventos específicos han tenido un impacto notable en el comportamiento de
las ventas y cómo se manifestó ese impacto?"""

import os
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt

df = dataframes["Diciembre.csv"]
df

df = dataframes["Diciembre.csv"]
df_f = df.loc[df['Dia']>16].loc[df['Dia'] < 26 ]

df_f.dropna(inplace=True)
df_f['Dia'] = df_f['Dia'].astype(int)
ventas_por_dia = df_f.groupby('Dia')['Cantidad Pedida'].sum()

dias = list(range(16, 26))

media = round(ventas_por_dia.mean(),0).astype(int)
min = ventas_por_dia.min()
max = ventas_por_dia.max()

print(f'media:{media}, min:{min}, max:{max}')

# -------- GRAFICOS -------- #

fig = go.Figure()
#Agregamos una nueva figura con un grafico con la variacion de los precios segun el producto

fig.add_trace(go.Scatter(
        x = dias,
        y = ventas_por_dia,
        mode='lines',
        name = mes,
        line = dict(shape='spline', smoothing=1.3,width=2))
)

#Actualizacion del grafico con update_layout
fig.update_layout(
    title='Unidades Vendidas entorno al 24 de Diciembre - Navidad',
    title_font=dict(size=30),
    xaxis = dict(title='Dias', tickvals=dias),
    yaxis = dict(title='Unidades vendidas',side='left'),
    font=dict(size=16)
)

fig.show()

df = dataframes["Julio.csv"]
df_f = df.loc[df['Dia']>11].loc[df['Dia'] < 20 ]

df_f.dropna(inplace=True)
df_f['Dia'] = df_f['Dia'].astype(int)
ventas_por_dia = df_f.groupby('Dia')['Cantidad Pedida'].sum()

dias = list(range(11, 20))

media = round(ventas_por_dia.mean(),0).astype(int)
min = ventas_por_dia.min()
max = ventas_por_dia.max()

print(f'media:{media}, min:{min}, max:{max}')

#-------- GRAFICOS --------#

fig = go.Figure()
#Agregamos una nueva figura con un grafico con la variacion de los precios segun el producto

fig.add_trace(go.Scatter(
        x = dias,
        y = ventas_por_dia,
        mode='lines',
        name = mes,
        line = dict(shape='spline', smoothing=1.3,width=2))
)

#Actualizacion del grafico con update_layout
fig.update_layout(
    title='Unidades Vendidas entorno al 18 de Julio - Dia del Padre',
    title_font=dict(size=30),
    xaxis = dict(title='Dias', tickvals=dias),
    yaxis = dict(title='Unidades vendidas',side='left'),
    font=dict(size=16)
)

fig.show()

df = dataframes["Abril.csv"]
df_f = df.loc[df['Dia']>6].loc[df['Dia'] < 14 ]

df_f.dropna(inplace = True)
df_f['Dia'] = df_f['Dia'].astype(int)
ventas_por_dia = df_f.groupby('Dia')['Cantidad Pedida'].sum()

dias = list(range(6, 14))

media = round(ventas_por_dia.mean(),0).astype(int)
min = ventas_por_dia.min()
max = ventas_por_dia.max()

print(f'media:{media}, min:{min}, max:{max}')

#-------- GRAFICOS --------#

fig = go.Figure()
# Agregamos una nueva figura con un grafico con la variacion de los precios segun el producto

fig.add_trace(go.Scatter(
        x = dias,
        y = ventas_por_dia,
        mode='lines',
        name = mes,
        line = dict(shape='spline', smoothing=1.3,width=2))
)

#Actualizacion del grafico con update_layout
fig.update_layout(
    title='Unidades Vendidas entorno al 12 de Abril - Dia de la Primavera',
    title_font=dict(size=30),
    xaxis = dict(title='Dias', tickvals=dias),
    yaxis = dict(title='Unidades vendidas',side='left'),
    font=dict(size=16)
)

fig.show()

df = dataframes["Mayo.csv"]
df_f = df.loc[df['Dia'] > 6].loc[df['Dia'] < 16 ]

df_f.dropna(inplace=True)
df_f['Dia'] = df_f['Dia'].astype(int)
ventas_por_dia = df_f.groupby('Dia')['Cantidad Pedida'].sum()

dias = list(range(6, 16))

media = round(ventas_por_dia.mean(),0).astype(int)
min = ventas_por_dia.min()
max = ventas_por_dia.max()

print(f'media:{media}, min:{min}, max:{max}')

#-------- GRAFICOS --------#

fig = go.Figure()
#Agregamos una nueva figura con un grafico con la variacion de los precios segun el producto

fig.add_trace(go.Scatter(
        x = dias,
        y = ventas_por_dia,
        mode='lines',
        name = mes,
        line = dict(shape='spline', smoothing=1.3,width=2))
)

#Actualizacion del grafico con update_layout
fig.update_layout(
    title='Unidades Vendidas entorno al 14 de Mayo - Dia de la Madre',
    title_font=dict(size=30),
    xaxis = dict(title='Dias', tickvals=dias),
    yaxis = dict(title='Unidades vendidas',side='left'),
    font=dict(size=16)
)

fig.show()

# Analisis particular del Dia de la Madre
import plotly.express as px

df = dataframes["Mayo.csv"]
df_f_mayo = df.loc[df['Dia'] > 6].loc[df['Dia'] < 16 ]

df_f_mayo = df_f_mayo.groupby('Producto')['Cantidad Pedida'].sum().reset_index()
df_f_mayo = df_f_mayo.sort_values(by='Cantidad Pedida', ascending=False)
df_f_mayo.reset_index(drop=True, inplace=True)



# Creamos el gráfico de los productos más vendidos en general
fig = px.bar(
    df_f_mayo,
    x='Producto',
    y='Cantidad Pedida',
    #orientation='h',  # Barras horizontales
    title='Productos vendidos entre 06/05 y 14/06',
    labels={'Cantidad Pedida': 'Cantidad Vendida', 'Producto': 'Producto'}
)

# Mostramos el gráfico interactivo
fig.show()

df = dataframes["Febrero.csv"]
df_f = df.loc[df['Dia']>8].loc[df['Dia'] < 16 ]

df_f.dropna(inplace=True)
df_f['Dia'] = df_f['Dia'].astype(int)
ventas_por_dia = df_f.groupby('Dia')['Cantidad Pedida'].sum()

dias = list(range(8, 16))

media = round(ventas_por_dia.mean(),0).astype(int)
min = ventas_por_dia.min()
max = ventas_por_dia.max()

print(f'media:{media}, min:{min}, max:{max}')
#-------- GRAFICOS --------#

fig = go.Figure()
#Agregamos una nueva figura con un grafico con la variacion de los precios segun el producto

fig.add_trace(go.Scatter(
        x = dias,
        y = ventas_por_dia,
        mode='lines',
        name = mes,
        line = dict(shape='spline', smoothing=1.3,width=2))
)

#Actualizacion del grafico con update_layout
fig.update_layout(
    title='Unidades Vendidas entorno al 14 de Febrero - San Valentin',
    title_font=dict(size=30),
    xaxis = dict(title='Dias', tickvals=dias),
    yaxis = dict(title='Unidades vendidas',side='left'),
    font=dict(size=16)
)

fig.show()

"""	PREGUNTA ADICIONAL te invito a pensar en una pregunta adicional que podría ser relevante para analizar los datos de ventas mensuales. Esta pregunta debe estar basada en la información que se proporciona en los conjuntos de datos"""